// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.10
// source: user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserRPCServiceClient is the client API for UserRPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserRPCServiceClient interface {
	GetUserInfo(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	GetUserInfoByToken(ctx context.Context, in *GetUserByTokenRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
}

type userRPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserRPCServiceClient(cc grpc.ClientConnInterface) UserRPCServiceClient {
	return &userRPCServiceClient{cc}
}

func (c *userRPCServiceClient) GetUserInfo(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/user.UserRPCService/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRPCServiceClient) GetUserInfoByToken(ctx context.Context, in *GetUserByTokenRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/user.UserRPCService/GetUserInfoByToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRPCServiceServer is the server API for UserRPCService service.
// All implementations must embed UnimplementedUserRPCServiceServer
// for forward compatibility
type UserRPCServiceServer interface {
	GetUserInfo(context.Context, *GetUserRequest) (*GetUserResponse, error)
	GetUserInfoByToken(context.Context, *GetUserByTokenRequest) (*GetUserResponse, error)
	mustEmbedUnimplementedUserRPCServiceServer()
}

// UnimplementedUserRPCServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserRPCServiceServer struct {
}

func (UnimplementedUserRPCServiceServer) GetUserInfo(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserRPCServiceServer) GetUserInfoByToken(context.Context, *GetUserByTokenRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByToken not implemented")
}
func (UnimplementedUserRPCServiceServer) mustEmbedUnimplementedUserRPCServiceServer() {}

// UnsafeUserRPCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserRPCServiceServer will
// result in compilation errors.
type UnsafeUserRPCServiceServer interface {
	mustEmbedUnimplementedUserRPCServiceServer()
}

func RegisterUserRPCServiceServer(s grpc.ServiceRegistrar, srv UserRPCServiceServer) {
	s.RegisterService(&UserRPCService_ServiceDesc, srv)
}

func _UserRPCService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRPCServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserRPCService/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRPCServiceServer).GetUserInfo(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRPCService_GetUserInfoByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRPCServiceServer).GetUserInfoByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserRPCService/GetUserInfoByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRPCServiceServer).GetUserInfoByToken(ctx, req.(*GetUserByTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserRPCService_ServiceDesc is the grpc.ServiceDesc for UserRPCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserRPCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserRPCService",
	HandlerType: (*UserRPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfo",
			Handler:    _UserRPCService_GetUserInfo_Handler,
		},
		{
			MethodName: "GetUserInfoByToken",
			Handler:    _UserRPCService_GetUserInfoByToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
