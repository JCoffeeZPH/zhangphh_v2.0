// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userrpcservice

import (
	"context"
	"zhangphh/lib/pb/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetUserByTokenRequest = user.GetUserByTokenRequest
	GetUserRequest        = user.GetUserRequest
	GetUserResponse       = user.GetUserResponse
	User                  = user.User

	UserRPCService interface {
		GetUserInfo(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
		GetUserInfoByToken(ctx context.Context, in *GetUserByTokenRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	}

	defaultUserRPCService struct {
		cli zrpc.Client
	}
)

func NewUserRPCService(cli zrpc.Client) UserRPCService {
	return &defaultUserRPCService{
		cli: cli,
	}
}

func (m *defaultUserRPCService) GetUserInfo(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	client := user.NewUserRPCServiceClient(m.cli.Conn())
	return client.GetUserInfo(ctx, in, opts...)
}

func (m *defaultUserRPCService) GetUserInfoByToken(ctx context.Context, in *GetUserByTokenRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	client := user.NewUserRPCServiceClient(m.cli.Conn())
	return client.GetUserInfoByToken(ctx, in, opts...)
}
